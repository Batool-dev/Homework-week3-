public with sharing class WeekThreeHomework {


    public static void homeworkAssignmentMethod() {
        //Read through the setup below and then complete the code following the prompts.  When you're done, make sure to compile (save) your work
        //Open Execute Anonymous in the Developer Console and execute your code by typing in: WeekThreeHomework.homeworkAssignmentMethod();
        //Read through the debug statements to make sure you're done your work correctly.

        //************************************************************************************************************

        // 1. Add two more whole numbers to this list using .add()
        List<Integer> numberList = new List<Integer>{ 0, 1, 1, 2, 3, 5, 8, 13, 21, 34 };
             numberList.add(4);
            numberList.add(10);

        //Checking our work:
        System.debug('This number should be 8: ' + numberList.size());
        System.debug('List of Whole Numbers: ' + numberList);

        //************************************************************************************************************
        // 2. Create a new Lead and insert it in the database. (If you're stuck, look back at the WeekThreeClassExercises class for an example of creating a new SObject Record)
        //You can give it any values you like, but remember that last name and Company are required fields (both are simple text fields.)


        //Checking our work:
        System.debug('We should see One DML was executed: ' + Limits.getDMLRows());
        Lead newLead = new Lead();
        newLead.FirstName = 'Sara';
        newLead.LastName = 'Mike';
        newLead.Company = 'Jacob';
        newLead.Status = 'Open';
        insert newLead; 
        
        //Checking work:
        System.debug('We should see One DML was executed: ' + Limits.getDMLRows());
        System.debug('Inserting new Lead record: ' +newLead);


        //************************************************************************************************************
        //3. For the loop that is commented out below, update the while condition by replacing the ?? so that the loop runs 5 times
        //delete the slashes so that the loop is no longer commented out and compile the class.

        //Can you add a debug statement to print out the counter value every time it runs through the loop?


        Integer counter = 0;

        //while (counter < 5) {
            counter++;  //without this line to increment counter, we'd have an infinite loop!
        //}

        System.debug('Done with the loop, it ran: ' + counter + ' times.');

    }

	public static void forLoopsExercise() {

		//1. Let's review iterating over a list of stuff.  How about Strings?

		List < String > myStringList = new List < String >{'red', 'yellow', 'green', 'blue'};

		// using for loop syntax, loop over the list of strings, printing each one out to the debug log.



		// 2. How about some SObjects?

		// I'll do the data setup here to create a list of contacts that all have a first name:
		Contact c1 = new Contact(FirstName='Sam',Lastname='Smith');
		Contact c2 = new Contact(FirstName='Diane',Lastname='Graw');
		Contact c3 = new Contact(FirstName='Coach',Lastname='Oliver');
		List < Contact > myContacts = new List < Contact >{c1,c2,c3};

		// Your turn!  Using a for loop, print out the first name of each contact on a different line
		//hint, you will need to use dot notation!
	
        for(Contact contactName : myContacts)
        {
            System.debug('Inserting First Names :' +contactName.FirstName);
            System.debug('Inserting Last Names:' +contactName.LastName);
            
            
        }




		//Bonus question to ponder: Do these contacts actually exist in our database?
		//What would it take to get them there?
		// Required field LastName is missing
        
        
        
        
        insert myContacts;
        
    }
}

